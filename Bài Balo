#include <iostream>

using namespace std;
int maxi(int a, int b)
{
    if (a > b)return a;
    else return b;
}
int main()
{
    int n, m;
    cout << "Nhap so luong do vat:\n";
    cin >> n;
    cout << "nhap dung luong cua cai tui:\n";
    cin >> m;
    int a[100];
    int dem[100];
    for (int i = 1; i <= n; i++)
    {
        cout << "Nhap khoi luong cua do vat " << i << ": ";
        cin >> a[i];
        cout << "Gia tri: ";
        cin >> dem[i];
    }
    int f[100][100];
    for (int i = 0; i <= n; i++)f[i][0] = 0;
    for (int i = 0; i <= m; i++)f[0][i] = 0;

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (a[i] <= j)
            {
                f[i][j] = maxi(f[i - 1][j], dem[i] + f[i - 1][j - a[i]]);
            }
            else f[i][j] == f[i - 1][j];
        }
    }
    cout << "\nGia tri toi da cua cai tui se la: ";
    cout << f[n][m] << endl;
    cout<<"Bai toan co do phuc tap la O(n^2)";
    return 0;
}







///////////////////////////THUAT TOAN Disjtra/////////////////////////////////



#include<iostream>

#include<conio.h>

using namespace std;

#define MAX 50

#define TRUE 1

#define FALSE  0

#define VOCUNG 10000000

int n;//số đỉnh của đồ thị.

int s;//đỉnh đầu.

int t;//đỉnh cuối

char chon;

int truoc[MAX];//mảng đánh dấu đường đi.

int d[MAX];//mảng đánh dấu khoảng cách.

int Matrix[MAX][MAX];//ma trận trọng số

int chuaxet[MAX];//mảng đánh dấu đỉnh đã được gán nhãn.


void Init(void) {

    cout << "nhap so dinh: ";
    cin >> n;
    cout << "nhap dinh dau va dinh cuoi cua do thi: ";
    cin >> s >> t;//nhập đỉnh đầu và đỉnh cuối của đồ thị.

    //nhập ma trận của đồ thị.
    cout << "nhap ma tran cua do thi: \n";
    for (int i = 1; i <= n; i++) {

        for (int j = 1; j <= n; j++) {

            cin >> Matrix[i][j];

            if (Matrix[i][j] == 0) Matrix[i][j] = VOCUNG;

        }

    }

}

void Result(void) {

    cout << "Duong di ngan nhat tu " << (char)(s + 'A' - 1) << " den " << (char)(t + 'A' - 1) << " la" << endl;

    cout << (char)(t + 'A' - 1) << "<=";//in đỉnh cuối dưới dạng char.

    int i = truoc[t];

    while (i != s) {

        cout << (char)(i + 'A' - 1) << "<=";//in ra kết quả dưới dạng char.

        i = truoc[i];

    }

    cout << (char)(s + 'A' - 1);//in đỉnh đầu dưới dạng char.

    cout << endl << "Do dai duong di la : " << d[t];

}

void Dijkstra(void) {

    int u, minp;

    //khởi tạo nhãn tạm thời cho các đỉnh.

    for (int v = 1; v <= n; v++) {

        d[v] = Matrix[s][v];

        truoc[v] = s;

        chuaxet[v] = FALSE;

    }

    truoc[s] = 0;

    d[s] = 0;

    chuaxet[s] = TRUE;

    //bươc lặp

    while (!chuaxet[t]) {

        minp = VOCUNG;

        //tìm đỉnh u sao cho d[u] là nhỏ nhất

        for (int v = 1; v <= n; v++) {

            if ((!chuaxet[v]) && (minp > d[v])) {

                u = v;

                minp = d[v];

            }

        }

        chuaxet[u] = TRUE;// u la dinh co nhan tam thoi nho nhat

        if (!chuaxet[t]) {

            //gán nhãn lại cho các đỉnh.

            for (int v = 1; v <= n; v++) {

                if ((!chuaxet[v]) && (d[u] + Matrix[u][v] < d[v])) {

                    d[v] = d[u] + Matrix[u][v];

                    truoc[v] = u;

                }

            }

        }

    }

}

void main() {

    Init();

    Dijkstra();
    cout << "======================DIJKSTRA's Algorithm=================\n";
    Result();

}











//////////////////////////////////////THUAT TOAN FLOYD-WARSHALL///////////////////////////////



#include <iostream>
#include <vector>
using namespace std;

#define rep(i,a,b) for (int i=a; i<=b; i++)
#define N 101
int C[N][N];
int T[N][N];

vector<int> trace(int u, int v) {
    vector<int> path;
    do {
        path.push_back(u);
        u = T[u][v];
    } while (path.back() != v);
    return path;
}

int main() {
    ios::sync_with_stdio(false); cin.tie(0);
    rep(i, 1, N) rep(j, 1, N) C[i][j] = 1e9;
    rep(i, 1, N) C[i][i] = 0;

    int n, m, q;
    cin >> n >> m >> q;
    rep(_, 1, m) {
        int u, v, w;
        cin >> u >> v >> w;
        C[u][v] = C[v][u] = w;
        T[u][v] = v;
        T[v][u] = u;
    }

    rep(k, 1, n) rep(i, 1, n) rep(j, 1, n) {
        if (C[i][j] > C[i][k] + C[k][j]) {
            C[i][j] = C[i][k] + C[k][j];
            T[i][j] = T[i][k];
        }
    }

    rep(_, 1, q) {
        int k, u, v;
        cin >> k >> u >> v;
        if (k) {
            auto path = trace(u, v);
            cout << path.size() << ' ';
            for (int u : path) cout << u << ' ';
        }
        else cout << C[u][v];
        cout << '\n';
    }
}



