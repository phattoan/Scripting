#include <iostream>

using namespace std;
int maxi(int a, int b)
{
    if (a > b)return a;
    else return b;
}
int main()
{
    int n, m;
    cout << "Nhap so luong do vat:\n";
    cin >> n;
    cout << "nhap dung luong cua cai tui:\n";
    cin >> m;
    int a[100];
    int dem[100];
    for (int i = 1; i <= n; i++)
    {
        cout << "Nhap khoi luong cua do vat " << i << ": ";
        cin >> a[i];
        cout << "Gia tri: ";
        cin >> dem[i];
    }
    int f[100][100];
    for (int i = 0; i <= n; i++)f[i][0] = 0;
    for (int i = 0; i <= m; i++)f[0][i] = 0;

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= m; j++)
        {
            if (a[i] <= j)
            {
                f[i][j] = maxi(f[i - 1][j], dem[i] + f[i - 1][j - a[i]]);
            }
            else f[i][j] == f[i - 1][j];
        }
    }
    cout << "\nGia tri toi da cua cai tui se la: ";
    cout << f[n][m] << endl;
    cout<<"Bai toan co do phuc tap la O(n^2)";
    return 0;
}







///////////////////////////THUAT TOAN Disjtra/////////////////////////////////



#include<iostream>

#include<conio.h>

using namespace std;

#define MAX 50

#define TRUE 1

#define FALSE  0

#define VOCUNG 10000000

int n;//số đỉnh của đồ thị.

int s;//đỉnh đầu.

int t;//đỉnh cuối

char chon;

int truoc[MAX];//mảng đánh dấu đường đi.

int d[MAX];//mảng đánh dấu khoảng cách.

int Matrix[MAX][MAX];//ma trận trọng số

int chuaxet[MAX];//mảng đánh dấu đỉnh đã được gán nhãn.


void Init(void) {

    cout << "nhap so dinh: ";
    cin >> n;
    cout << "nhap dinh dau va dinh cuoi cua do thi: ";
    cin >> s >> t;//nhập đỉnh đầu và đỉnh cuối của đồ thị.

    //nhập ma trận của đồ thị.
    cout << "nhap ma tran cua do thi: \n";
    for (int i = 1; i <= n; i++) {

        for (int j = 1; j <= n; j++) {

            cin >> Matrix[i][j];

            if (Matrix[i][j] == 0) Matrix[i][j] = VOCUNG;

        }

    }

}

void Result(void) {

    cout << "Duong di ngan nhat tu " << (char)(s + 'A' - 1) << " den " << (char)(t + 'A' - 1) << " la" << endl;

    cout << (char)(t + 'A' - 1) << "<=";//in đỉnh cuối dưới dạng char.

    int i = truoc[t];

    while (i != s) {

        cout << (char)(i + 'A' - 1) << "<=";//in ra kết quả dưới dạng char.

        i = truoc[i];

    }

    cout << (char)(s + 'A' - 1);//in đỉnh đầu dưới dạng char.

    cout << endl << "Do dai duong di la : " << d[t];

}

void Dijkstra(void) {

    int u, minp;

    //khởi tạo nhãn tạm thời cho các đỉnh.

    for (int v = 1; v <= n; v++) {

        d[v] = Matrix[s][v];

        truoc[v] = s;

        chuaxet[v] = FALSE;

    }

    truoc[s] = 0;

    d[s] = 0;

    chuaxet[s] = TRUE;

    //bươc lặp

    while (!chuaxet[t]) {

        minp = VOCUNG;

        //tìm đỉnh u sao cho d[u] là nhỏ nhất

        for (int v = 1; v <= n; v++) {

            if ((!chuaxet[v]) && (minp > d[v])) {

                u = v;

                minp = d[v];

            }

        }

        chuaxet[u] = TRUE;// u la dinh co nhan tam thoi nho nhat

        if (!chuaxet[t]) {

            //gán nhãn lại cho các đỉnh.

            for (int v = 1; v <= n; v++) {

                if ((!chuaxet[v]) && (d[u] + Matrix[u][v] < d[v])) {

                    d[v] = d[u] + Matrix[u][v];

                    truoc[v] = u;

                }

            }

        }

    }

}

void main() {

    Init();

    Dijkstra();
    cout << "======================DIJKSTRA's Algorithm=================\n";
    Result();

}











//////////////////////////////////////THUAT TOAN FLOYD-WARSHALL///////////////////////////////



#include<iostream>

#include<conio.h>

using namespace std;

#define MAX 10000 

#define TRUE 1 

#define FALSE  0 

int A[50][50];// ma trận trọng số của đồ thị.

int D[50][50];//la mang chua cac gia tri khoan cach ngan nhat tu i den j

int S[50][50];//S la mang chua gia tri phan tu ngay sau cua i tren duong di ngan nhat tu i->j */

int n;//số đỉnh của đồ thị

int u;//đỉnh đầu của đường đi

int v;//đỉnh cuối của đường đi

void Init(void) {

    

    cout << "Nhap So dinh cua do thi: " << endl;
    cin >> n;
    cout << "Nhap dinh dau va dinh cuoi cua do thi: " << endl;
    cin >> u >> v;
    cout << "nhap ma tran trong so: \n";
    for (int i = 1; i <= n; i++) {

        for (int j = 1; j <= n; j++) {

            cin >> A[i][j];

            if (i != j && A[i][j] == 0)

                A[i][j] = MAX;

        }

    }

}

void Result(void) {

    if (D[u][v] >= MAX) {

        cout << "Khong co duong di";

    }

    else {

        cout << "Duong di ngan nhat tu " << (char)(u + 'A' - 1) << " den " << (char)(v + 'A' - 1) << " co do dai la " << D[u][v] << endl;

        cout << "Duong di: " << (char)(u + 'A' - 1);//in đỉnh đầu dưới dạng char.

        while (u != v) {

            cout << "->" << (char)(S[u][v] + 'A' - 1);//in ra đường đi dưới dạng char.

            u = S[u][v];

        }

    }

}

void Floy(void) {

    int i, j, k, found;

    for (i = 1; i <= n; i++) {

        for (j = 1; j <= n; j++) {

            D[i][j] = A[i][j];

            if (D[i][j] == MAX) S[i][j] = 0;

            else S[i][j] = j;

        }

    }

    /* Mang D[i,j] la mang chua cac gia tri khoan cach ngan nhat tu i den j

    Mang S la mang chua gia tri phan tu ngay sau cua i tren duong di

    ngan nhat tu i->j */

    for (k = 1; k <= n; k++) {

        for (i = 1; i <= n; i++) {

            for (j = 1; j <= n; j++) {

                if (D[i][k] != MAX && D[i][j] > (D[i][k] + D[k][j])) {

                    // Tim D[i,j] nho nhat co the co 

                    D[i][j] = D[i][k] + D[k][j];

                    S[i][j] = S[i][k];

                    //ung voi no la gia tri cua phan tu ngay sau i 

                }

            }

        }

    }

}

void main(void) {

    Init();

    Floy();
    cout << "==============================Floyd-Warshall's Algorithm========================\n";
    Result();


}


