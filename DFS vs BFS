#include <iostream>
#include <fstream>
#include <vector>

using namespace std;
#define MAX 100
struct GRAPH
{
	int a[MAX][MAX];
	int nVertex;
	int trace[MAX];
	bool visited[MAX];
};
bool inputGRAPH(GRAPH& p)
{
	cout << "Enter Testcase: ";
	cin >> p.nVertex;
		for (int i = 0; i < p.nVertex; i++)
			for (int j = 0; j < p.nVertex; j++)
				cin >> p.a[i][j];

}
bool AdjacencyMatrix_check(GRAPH& h)
{
	for (int i = 0; i < h.nVertex; i++)
		for (int j = 0; j < h.nVertex; j++)
			if (h.a[i][j] != h.a[j][i])return false;
	return true;
}
bool ScalaringMatrix_check(GRAPH& h)
{
	for (int i = 0; i < h.nVertex; i++)
		if (h.a[i][i] != 0)return false;
	return true;
}
void doDFS(GRAPH& h, int z)
{
	h.visited[z] = true;
	for (int i = 0; i < h.nVertex; i++)
	{
		if (h.a[z][i] != 0 && h.visited[i] == false)
		{
			h.trace[i] = z;

			doDFS(h, i);
		}
	}
}
bool matrix_check(bool a[], int k)
{
	for (int i = 0; i < k; i++)
		if (a[i] == false)return false;
	return true;
}
bool take_vector(int& h, vector <int>& v)
{
	if (v.size() == 0)return false;
	h = v[0];
	v.erase(v.begin());
	return true;
}
bool vector_addin(vector<int>& v, int z)
{
	if (v.size() + 1 > MAX)return false;
	v.push_back(z); return true;
}
void DFS(GRAPH& h, int f, int l)
{
	for (int i = 0; i < h.nVertex; i++)
	{
		h.trace[i] = -1;
		h.visited[i] = false;
	}
	doDFS(h, f);
	if (h.visited[l] == true)
	{
		int j = l;
		while (j != f)
		{
			cout << j << "<==";
			j = h.trace[j];
		}
		cout << f << endl;
	}
	else cout << "There is no way go from beginning to last\n";
}
void doBFS(GRAPH& h, int z)
{
	vector <int> v;
	v.push_back(z);
	while (v.size() != 0)
	{
		take_vector(z, v);
		h.visited[z] = true;
		for (int i = 0; i < h.nVertex; i++)
			if (h.visited[i] == false && h.a[z][i] != 0)
			{
				v.push_back(i);
				h.trace[i] = z;
			}
	}
}
void BFS(int s, int f, GRAPH& g)
{
	for (int i = 0; i < g.nVertex; i++)
	{
		g.visited[i] = false;
		g.trace[i] = -1;
	}

	doBFS(g, s);

	if (g.visited[f] == 1)
	{
		int j = f;
		while (j != s)
		{
			cout << j << "<---";
			j = g.trace[j];
		}
		cout << s;
		cout << endl;
	}
	else
		cout << "There is no way go from beginning to last\n";
	cout << endl;
}

int main()
{
	GRAPH g;
	string a;
	cout << "CODE BY TEAM FANNIE_5 \n";
	cout << "\n=================================================================\n";
	inputGRAPH(g);
		if (AdjacencyMatrix_check(g))
		{
			if (ScalaringMatrix_check(g))
			{
				int head, tail;
				cout << "Enter first_vertex: ";
				cin >> head;
				cout << "Enter last_vertex: ";
				cin >> tail;
				cout << "DFS's algorithm:\n";
				DFS(g, head, tail);
				cout << "BSF's algorithm:\n";
				BFS(head, tail, g);
			}
			else cout << "Matrix is not scalaring";
		}
		else cout << "It is not adjacency matrix";
}
